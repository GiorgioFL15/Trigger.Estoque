SET SQL_SAFE_UPDATES = 0;
DROP DATABASE IF EXISTS DBPEDIDO;
CREATE DATABASE DBPEDIDO;

USE DBPEDIDO;

CREATE TABLE PRODUTO (
	IDPRODUTO INT NOT NULL AUTO_INCREMENT
    , NOME VARCHAR(45)
    , ESTOQUE INT
	, PRIMARY KEY(IDPRODUTO)
);

CREATE TABLE COMPRA (
	IDCOMPRA INT NOT NULL AUTO_INCREMENT
    , IDPRODUTO INT NOT NULL
	, QTDE INT
    , PRECOUNITARIO NUMERIC(8,2)
    , PRIMARY KEY (IDCOMPRA)
    , FOREIGN KEY (IDPRODUTO) REFERENCES PRODUTO(IDPRODUTO)
);

CREATE TABLE VENDA (
	IDVENDA INT NOT NULL AUTO_INCREMENT
    , IDPRODUTO INT NOT NULL
	, QTDE INT
    , PRECOUNITARIO NUMERIC(8,2)
    , PRIMARY KEY (IDVENDA)
    , FOREIGN KEY (IDPRODUTO) REFERENCES PRODUTO(IDPRODUTO)
);

DELIMITER $$
-- 1
CREATE TRIGGER TR_AI_COMPRA AFTER INSERT ON COMPRA FOR EACH ROW
BEGIN
    IF NEW.IDPRODUTO = (SELECT IDPRODUTO FROM PRODUTO WHERE IDPRODUTO = NEW.IDPRODUTO) THEN
    UPDATE PRODUTO SET PRODUTO.ESTOQUE = PRODUTO.ESTOQUE + NEW.QTDE WHERE IDPRODUTO = NEW.IDPRODUTO;
    END IF;
END $$

 

-- 2
CREATE TRIGGER TR_AI_VENDA AFTER INSERT ON VENDA FOR EACH ROW
BEGIN
    IF NEW.IDPRODUTO = (SELECT IDPRODUTO FROM PRODUTO WHERE IDPRODUTO = NEW.IDPRODUTO) THEN
    UPDATE PRODUTO SET PRODUTO.ESTOQUE = PRODUTO.ESTOQUE - NEW.QTDE WHERE IDPRODUTO = NEW.IDPRODUTO;
    END IF;
END $$
CREATE TRIGGER TR_BI_VENDA BEFORE INSERT ON VENDA FOR EACH ROW
BEGIN
    IF((SELECT ESTOQUE FROM PRODUTO WHERE IDPRODUTO = NEW.IDPRODUTO) < NEW.QTDE) THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'NÃO PODE SER VENDIDO';
    END IF;
END $$
 

-- 3
CREATE TRIGGER TR_BD_COMPRA BEFORE DELETE ON COMPRA FOR EACH ROW
BEGIN
    IF((SELECT ESTOQUE FROM PRODUTO WHERE IDPRODUTO = OLD.IDPRODUTO) < OLD.QTDE) THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'NÃO PODE SER COMPRADO';
    END IF;
END $$

-- 4 

CREATE TRIGGER TR_BD_VENDA BEFORE DELETE ON VENDA FOR EACH ROW
BEGIN
	UPDATE PRODUTO SET PRODUTO.ESTOQUE = PRODUTO.ESTOQUE + OLD.QTDE WHERE IDPRODUTO = OLD.IDPRODUTO;
END $$

-- 5 

CREATE TRIGGER TR_BI_VENDA BEFORE INSERT ON VENDA FOR EACH ROW 

BEGIN 
	IF((SELECT ESTOQUE FROM PRODUTO WHERE IDPRODUTO = OLD.IDPRODUTO) <= OLD.QTDE) THEN 
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'NÃO POSSUI A QUANTIDADE NO ESTOQUE';
    END IF;
END $$

-- 6 

CREATE TRIGGER TR_AU_COMPRA AFTER UPDATE ON COMPRA FOR EACH ROW 

	IF NEW.IDPRODUTO <> OLD.IDPRODUTO THEN 
		UPDATE PRODUTO SET ESTOQUE  = ESTOQUE - NEW.QTDE WHERE IDPRODUTO = OLD.IDPRODUTO;
        UPDATE PRODUTO SET ESTOQUE = ESTOQUE + NEW.QTDE WHERE IDPRODUTO = NEW.IDPRODUTO;
        END IF;
	
    IF NEW.QTDE <> THEN 
		UPDATE PRODUTO SET ESTOQUE = ESTOQUE - OLD.QTDE;
        UPDATE PRODUTO SET ESTOQUE = ESTOQUE - OLD.QTDE;
	END IF; 
END $$

CREATE TRIGGER TR_BU_COMPRA BEFORE UPDATE ON COMPRA FOR EACH ROW

BEGIN
    IF((SELECT ESTOQUE FROM PRODUTO WHERE IDPRODUTO = NEW.IDPRODUTO) < NEW.QTDE) THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'ESTOQUE INSUFICIENTE PARA REALIZAR A ALTEÇÃO';
    END IF;
END $$

-- 7 
CREATE TRIGGER TR_AU_VENDA AFTER UPDATE ON VENDA FOR EACH ROW
BEGIN
    IF NEW.IDPRODUTO <> OLD.IDPRODUTO THEN
            UPDATE PRODUTO SET ESTOQUE = ESTOQUE + NEW.QTDE WHERE IDPRODUTO = OLD.IDPRODUTO;
            UPDATE PRODUTO SET ESTOQUE = ESTOQUE - NEW.QTDE WHERE IDPRODUTO = NEW.IDPRODUTO;
    END IF;
    IF NEW.QTDE <> OLD.QTDE THEN
        UPDATE PRODUTO SET ESTOQUE = ESTOQUE - OLD.QTDE;
        UPDATE PRODUTO SET ESTOQUE = ESTOQUE + NEW.QTDE;
    END IF;
END $$
CREATE TRIGGER TR_BU_VENDA BEFORE UPDATE ON VENDA FOR EACH ROW
BEGIN
    IF((SELECT ESTOQUE FROM PRODUTO WHERE IDPRODUTO = NEW.IDPRODUTO) < NEW.QTDE) THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'ESTOQUE INSUFICIENTE PARA REALIZAR A ALTEÇÃO';
    END IF;
END $$

DELIMITER ;
 

